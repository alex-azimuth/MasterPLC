<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>Enable_RT(Clk:=Enable);&#xD;
&#xD;
// Make sure initial state is the drive at stop.&#xD;
// Make sure we always have a stop code before anything else&#xD;
IF (Enable_RT.Q) THEN&#xD;
	Control_Word := Stop_Code2;&#xD;
END_IF;&#xD;
&#xD;
IF (Enable) THEN&#xD;
// Setup triggers&#xD;
	Start_RT(CLK:=Start);&#xD;
	Stop_RT(CLK:=Stop);&#xD;
	Reset_RT(CLK:=Reset_Drive);&#xD;
	Reset_Pulse_FT(CLK:=Reset_Pulse.Q);&#xD;
&#xD;
	IF (Coast_Stop) THEN&#xD;
		Stop_Code := 1148;&#xD;
	ELSE&#xD;
		Stop_Code := 1150;&#xD;
	END_IF;&#xD;
&#xD;
	// Setup coasting for high intertia load, change Stop_Code to 1148&#xD;
	Coast_Timer(IN:=Control_Word=1148, PT:=T#0.1s, ET=&gt;Show_ET2);&#xD;
	&#xD;
	IF (Coast_Timer.Q) THEN&#xD;
		Control_Word := Stop_Code2;&#xD;
	END_IF;&#xD;
&#xD;
	// Start/stop drive &amp; Reset&#xD;
	IF (Start_RT.Q) THEN&#xD;
		Control_Word := Start_Code;&#xD;
	END_IF;&#xD;
	IF (Stop_RT.Q) AND (Control_Word = 1151) THEN&#xD;
		Control_Word := Stop_Code;&#xD;
	END_IF;&#xD;
&#xD;
	// Make sure to reset the drive based on the stop control word, easily modifiable if necessary&#xD;
	IF (Reset_RT.Q) THEN&#xD;
		Control_Word := Stop_Code;&#xD;
		Reset_Word := UINT_TO_WORD(Control_Word);&#xD;
		SetABit(Reset_Word, 7);&#xD;
		Control_Word := WORD_TO_UINT(Reset_Word);&#xD;
		// Provide a length of time during which we send a reset signal&#xD;
		Test324 := NOT Test324;&#xD;
		Resetting := TRUE;&#xD;
	END_IF;&#xD;
	// Activate the reset code for a set time&#xD;
	Reset_Pulse(IN:=Resetting, PT:=T#1s, ET=&gt;Show_Et);&#xD;
	// When the pulse is finished then remove the reset code&#xD;
	IF (Reset_Pulse_FT.Q) THEN&#xD;
		Resetting := FALSE;&#xD;
		ResetABit(Reset_Word, 7);&#xD;
		Control_Word := WORD_TO_INT(Reset_Word);&#xD;
	END_IF;&#xD;
&#xD;
	// Accel/Decel&#xD;
	Accel_OUT := REAL_TO_DINT(Accel_Time*1000);&#xD;
	Decel_OUT := REAL_TO_DINT(Decel_Time*1000);&#xD;
	&#xD;
	// Speed Control&#xD;
	Ref := SafeDiv_REAL(Ref_IN_Hz, Scale_REF);&#xD;
&#xD;
	// Control forward/reverse&#xD;
	IF (Reverse) THEN&#xD;
		Ref_OUT := (REAL_TO_INT(Ref))*-1;&#xD;
		Forward := FALSE;&#xD;
	ELSE&#xD;
		Ref_OUT := REAL_TO_INT(Ref);&#xD;
		Forward := TRUE;&#xD;
	END_IF;&#xD;
&#xD;
	// Is there a fault?&#xD;
	IF (TestABit(UINT_TO_WORD(Status_Word), USINT#3)) THEN&#xD;
		Fault := TRUE;&#xD;
	ELSE&#xD;
		Fault := FALSE;&#xD;
	END_IF;&#xD;
&#xD;
	// is the drive running?&#xD;
	IF (TestABit(UINT_TO_WORD(Status_Word), USINT#8)) THEN&#xD;
		Running := TRUE;&#xD;
	ELSE&#xD;
		Running := FALSE;&#xD;
	END_IF;&#xD;
	Out_FaultMsg := GetACS580ErrMsg(Fault_Code);&#xD;
	&#xD;
	Out_Current := DINT_TO_REAL(Current)/100;&#xD;
	Out_Total_Torque := DINT_TO_REAL(Total_Torque)/10;&#xD;
	OUT_DC_Voltage := DINT_TO_REAL(DC_Voltage)/100;&#xD;
	Out_Freq := DINT_TO_REAL(Freq)/100;&#xD;
END_IF;</Text></StructuredTextModel>