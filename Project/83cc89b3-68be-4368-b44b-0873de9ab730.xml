<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>Status := State &gt; 10 OR Enable;&#xD;
IF State = 0 THEN&#xD;
	RequestCycleDone := FALSE;&#xD;
	Error := FALSE;&#xD;
	ErrorID := 0;&#xD;
	ErrorIDEx := 0;&#xD;
	ErrorRequestNO := 0;&#xD;
	&#xD;
	IF Enable THEN&#xD;
		UpdateRateTimer := ADD_TIME(UpdateRateTimer, GetMyTaskInterval());&#xD;
		IF UpdateRateTimer &gt;= UpdateRate THEN&#xD;
			RequestPnt := LOWER_BOUND(Requests, 1);&#xD;
			UpdateRateTimer := T#0s;&#xD;
			RequestCycleStart := Get1msCnt();&#xD;
			TimeOut := LINT_TO_UINT(TimeToNanoSec(NodeTimeOut)/100000000); //Time to 0.1s&#xD;
			Error := FALSE;&#xD;
			ErrorRequestNO := 0;&#xD;
			ErrorID := 0;&#xD;
			ErrorIDEx := 0;&#xD;
			State := 10;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 10 THEN&#xD;
	IF Enable THEN&#xD;
		FoundRequest := FALSE;&#xD;
		FOR i := RequestPnt TO UPPER_BOUND(Requests, 1) DO&#xD;
			IF Requests[i].Enable THEN&#xD;
				RequestPnt := i;&#xD;
				FoundRequest := TRUE;&#xD;
				EXIT;&#xD;
			END_IF;&#xD;
		END_FOR;&#xD;
		IF FoundRequest THEN&#xD;
			State := 20;&#xD;
		ELSE&#xD;
			State := 3000; //Finished&#xD;
		END_IF;&#xD;
	ELSE&#xD;
		State := 0;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 20 THEN&#xD;
	iNX_SerialBufClear(Execute := FALSE, DevicePort := DevicePort, BufKind := _eSERIAL_BUF_KIND#_BUF_SENDRCV);&#xD;
	State := 30;&#xD;
END_IF;&#xD;
&#xD;
IF State = 30 THEN&#xD;
	iNX_SerialBufClear(Execute := TRUE, DevicePort := DevicePort, BufKind := _eSERIAL_BUF_KIND#_BUF_SENDRCV);&#xD;
	IF NOT iNX_SerialBufClear.Busy THEN&#xD;
		State := 100;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 100 THEN&#xD;
	Clear(SendAr);&#xD;
	CASE Requests[RequestPnt].FunctionCode OF&#xD;
		eFun#Fn01_ReadCoils:							IF UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal) &gt;= LOWER_BOUND(Coils, 1) AND UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1)  &lt;= UPPER_BOUND(Coils, 1) THEN&#xD;
																		State := DINT_TO_UINT(100 + EnumToNum(Requests[RequestPnt].FunctionCode));&#xD;
																		&#xD;
																		SendAr[0] := UINT_TO_BYTE(Requests[RequestPnt].NodeAdr);&#xD;
																		SendAr[1] := DINT_TO_BYTE(Requests[RequestPnt].FunctionCode);&#xD;
																		ToAryByte(Requests[RequestPnt].Read.StartAddressRemote, _HIGH_LOW, SendAr[2]);&#xD;
																		ToAryByte(Requests[RequestPnt].Read.Count, _HIGH_LOW, SendAr[4]);&#xD;
																		&#xD;
																		BytePnt := 6;&#xD;
																		&#xD;
																		CRC_Word := AryCRC16(In := SendAr[0], Size := BytePnt);&#xD;
																		ToAryByte(In := CRC_Word, Order := _eBYTE_ORDER#_HIGH_LOW, AryOut := SendAr[BytePnt]);&#xD;
																		BytePnt := BytePnt + 2;&#xD;
&#xD;
																		PacketSize := BytePnt;&#xD;
																		State := 110;&#xD;
																	ELSE&#xD;
																		//Address error&#xD;
																		ErrorRequestNO := RequestPnt;&#xD;
																		ErrorID := 16#1001; //Modbus address outside of Array boundary&#xD;
																		State := 2000;&#xD;
																	END_IF;&#xD;
																	&#xD;
		eFun#Fn02_ReadDiscreteInputs:			IF UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal) &gt;= LOWER_BOUND(DiscreteInputs, 1) AND UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1)  &lt;= UPPER_BOUND(DiscreteInputs, 1) THEN&#xD;
																		State := DINT_TO_UINT(100 + EnumToNum(Requests[RequestPnt].FunctionCode));&#xD;
																		&#xD;
																		SendAr[0] := UINT_TO_BYTE(Requests[RequestPnt].NodeAdr);&#xD;
																		SendAr[1] := DINT_TO_BYTE(Requests[RequestPnt].FunctionCode);&#xD;
																		ToAryByte(Requests[RequestPnt].Read.StartAddressRemote, _HIGH_LOW, SendAr[2]);&#xD;
																		ToAryByte(Requests[RequestPnt].Read.Count, _HIGH_LOW, SendAr[4]);&#xD;
																		&#xD;
																		BytePnt := 6;&#xD;
																		&#xD;
																		CRC_Word := AryCRC16(In := SendAr[0], Size := BytePnt);&#xD;
																		ToAryByte(In := CRC_Word, Order := _eBYTE_ORDER#_HIGH_LOW, AryOut := SendAr[BytePnt]);&#xD;
																		BytePnt := BytePnt + 2;&#xD;
&#xD;
																		PacketSize := BytePnt;&#xD;
																		State := 110;&#xD;
																	ELSE&#xD;
																		//Address error&#xD;
																		ErrorRequestNO := RequestPnt;&#xD;
																		ErrorID := 16#1001; //Modbus address outside of Array boundary&#xD;
																		State := 2000;&#xD;
																	END_IF;&#xD;
		&#xD;
		eFun#Fn03_ReadHoldingRegisters:		IF UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal) &gt;= LOWER_BOUND(HoldingRegisters, 1) AND UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1)  &lt;= UPPER_BOUND(HoldingRegisters, 1) THEN&#xD;
																		State := DINT_TO_UINT(100 + EnumToNum(Requests[RequestPnt].FunctionCode));&#xD;
																		&#xD;
																		SendAr[0] := UINT_TO_BYTE(Requests[RequestPnt].NodeAdr);&#xD;
																		SendAr[1] := DINT_TO_BYTE(Requests[RequestPnt].FunctionCode);&#xD;
																		ToAryByte(Requests[RequestPnt].Read.StartAddressRemote, _HIGH_LOW, SendAr[2]);&#xD;
																		ToAryByte(Requests[RequestPnt].Read.Count, _HIGH_LOW, SendAr[4]);&#xD;
																		&#xD;
																		BytePnt := 6;&#xD;
																		&#xD;
																		CRC_Word := AryCRC16(In := SendAr[0], Size := BytePnt);&#xD;
																		ToAryByte(In := CRC_Word, Order := _eBYTE_ORDER#_HIGH_LOW, AryOut := SendAr[BytePnt]);&#xD;
																		BytePnt := BytePnt + 2;&#xD;
&#xD;
																		PacketSize := BytePnt;&#xD;
																		State := 110;&#xD;
																	ELSE&#xD;
																		//Address error&#xD;
																		ErrorRequestNO := RequestPnt;&#xD;
																		ErrorID := 16#1001; //Modbus address outside of Array boundary&#xD;
																		State := 2000;&#xD;
																	END_IF;&#xD;
		&#xD;
		eFun#Fn04_ReadInputRegisters:			IF UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal) &gt;= LOWER_BOUND(InputRegisters, 1) AND UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1)  &lt;= UPPER_BOUND(InputRegisters, 1) THEN&#xD;
																		State := DINT_TO_UINT(100 + EnumToNum(Requests[RequestPnt].FunctionCode));&#xD;
																		&#xD;
																		SendAr[0] := UINT_TO_BYTE(Requests[RequestPnt].NodeAdr);&#xD;
																		SendAr[1] := DINT_TO_BYTE(Requests[RequestPnt].FunctionCode);&#xD;
																		ToAryByte(Requests[RequestPnt].Read.StartAddressRemote, _HIGH_LOW, SendAr[2]);&#xD;
																		ToAryByte(Requests[RequestPnt].Read.Count, _HIGH_LOW, SendAr[4]);&#xD;
&#xD;
																		BytePnt := 6;&#xD;
																		&#xD;
																		CRC_Word := AryCRC16(In := SendAr[0], Size := BytePnt);&#xD;
																		ToAryByte(In := CRC_Word, Order := _eBYTE_ORDER#_HIGH_LOW, AryOut := SendAr[BytePnt]);&#xD;
																		BytePnt := BytePnt + 2;&#xD;
&#xD;
																		PacketSize := BytePnt;&#xD;
																		State := 110;&#xD;
																	ELSE&#xD;
																		//Address error&#xD;
																		ErrorRequestNO := RequestPnt;&#xD;
																		ErrorID := 16#1001; //Modbus address outside of Array boundary&#xD;
																		State := 2000;&#xD;
																	END_IF;&#xD;
																	&#xD;
		eFun#Fn05_WriteSingleCoil:				IF UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal) &gt;= LOWER_BOUND(Coils, 1) AND UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal)  &lt;= UPPER_BOUND(Coils, 1) THEN&#xD;
																		State := DINT_TO_UINT(100 + EnumToNum(Requests[RequestPnt].FunctionCode));&#xD;
&#xD;
																		SendAr[0] := UINT_TO_BYTE(Requests[RequestPnt].NodeAdr);&#xD;
																		SendAr[1] := DINT_TO_BYTE(Requests[RequestPnt].FunctionCode);&#xD;
																		ToAryByte(Requests[RequestPnt].Write.StartAddressRemote, _HIGH_LOW, SendAr[2]);&#xD;
																		IF Coils[Requests[RequestPnt].Write.StartAddressLocal] THEN&#xD;
																			SendAr[4] := 16#FF;&#xD;
																		ELSE&#xD;
																			SendAr[4] := 16#00;&#xD;
																		END_IF;&#xD;
																		&#xD;
																		BytePnt := 6;&#xD;
																		&#xD;
																		CRC_Word := AryCRC16(In := SendAr[0], Size := BytePnt);&#xD;
																		ToAryByte(In := CRC_Word, Order := _eBYTE_ORDER#_HIGH_LOW, AryOut := SendAr[BytePnt]);&#xD;
																		BytePnt := BytePnt + 2;&#xD;
&#xD;
																		PacketSize := BytePnt;&#xD;
																		State := 110;&#xD;
																	ELSE&#xD;
																		//Address error&#xD;
																		ErrorRequestNO := RequestPnt;&#xD;
																		ErrorID := 16#1001; //Modbus address outside of Array boundary&#xD;
																		State := 2000;&#xD;
																	END_IF;&#xD;
		&#xD;
		eFun#Fn06_WriteSingleRegister:			IF UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal) &gt;= LOWER_BOUND(HoldingRegisters, 1) AND UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal)  &lt;= UPPER_BOUND(HoldingRegisters, 1) THEN&#xD;
																		State := DINT_TO_UINT(100 + EnumToNum(Requests[RequestPnt].FunctionCode));&#xD;
																		&#xD;
																		SendAr[0] := UINT_TO_BYTE(Requests[RequestPnt].NodeAdr);&#xD;
																		SendAr[1] := DINT_TO_BYTE(Requests[RequestPnt].FunctionCode);&#xD;
																		ToAryByte(Requests[RequestPnt].Write.StartAddressRemote, _HIGH_LOW, SendAr[2]);&#xD;
																		ToAryByte(HoldingRegisters[Requests[RequestPnt].Write.StartAddressLocal], _HIGH_LOW, SendAr[4]);&#xD;
																		&#xD;
																		BytePnt := 6;&#xD;
																		CRC_Word := AryCRC16(In := SendAr[0], Size := BytePnt);&#xD;
																		ToAryByte(In := CRC_Word, Order := _eBYTE_ORDER#_HIGH_LOW, AryOut := SendAr[BytePnt]);&#xD;
																		BytePnt := BytePnt + 2;&#xD;
																		&#xD;
																		PacketSize := BytePnt;&#xD;
																		State := 110;&#xD;
																	ELSE&#xD;
																		//Address error&#xD;
																		ErrorRequestNO := RequestPnt;&#xD;
																		ErrorID := 16#1001; //Modbus address outside of Array boundary&#xD;
																		State := 2000;&#xD;
																	END_IF;&#xD;
		&#xD;
		eFun#Fn15_WriteMultipleCoils:			IF UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal) &gt;= LOWER_BOUND(Coils, 1) AND UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal + Requests[RequestPnt].Write.Count - 1)  &lt;= UPPER_BOUND(Coils, 1) THEN&#xD;
																		State := DINT_TO_UINT(100 + EnumToNum(Requests[RequestPnt].FunctionCode));&#xD;
																		&#xD;
																		SendAr[0] := UINT_TO_BYTE(Requests[RequestPnt].NodeAdr);&#xD;
																		SendAr[1] := DINT_TO_BYTE(Requests[RequestPnt].FunctionCode);&#xD;
																		ToAryByte(Requests[RequestPnt].Write.StartAddressRemote, _HIGH_LOW, SendAr[2]);&#xD;
																		ToAryByte(Requests[RequestPnt].Write.Count, _HIGH_LOW, SendAr[4]);&#xD;
																		BytePnt := 7;&#xD;
																		BitPnt := 0;&#xD;
																		FOR i := Requests[RequestPnt].Write.StartAddressLocal TO (Requests[RequestPnt].Write.StartAddressLocal + Requests[RequestPnt].Write.Count -1) DO&#xD;
																			OutABit(InOut := SendAr[BytePnt], Pos := BitPnt, BitVal := Coils[i]);&#xD;
																			Inc(BitPnt);&#xD;
																			IF i &lt; UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal + Requests[RequestPnt].Write.Count -1) THEN&#xD;
																				//To avoid incrementing BytePnt if the last coil is written to the end of a byte&#xD;
																				IF BitPnt &gt;= 8 THEN&#xD;
																					Inc(BytePnt);&#xD;
																					BitPnt := 0;&#xD;
																				END_IF;&#xD;
																			END_IF;&#xD;
																		END_FOR;&#xD;
																		SendAr[6] := UINT_TO_BYTE(BytePnt - UINT#7 + UINT#1);	//Number of bytes containing coil data&#xD;
																		BytePnt := BytePnt + 1;&#xD;
																		CRC_Word := AryCRC16(In := SendAr[0], Size := BytePnt);&#xD;
																		ToAryByte(In := CRC_Word, Order := _eBYTE_ORDER#_HIGH_LOW, AryOut := SendAr[BytePnt]);&#xD;
																		BytePnt := BytePnt + 2;&#xD;
																		&#xD;
																		PacketSize := BytePnt;&#xD;
																		State := 110;&#xD;
																	ELSE&#xD;
																		//Address error&#xD;
																		ErrorRequestNO := RequestPnt;&#xD;
																		ErrorID := 16#1001; //Modbus address outside of Array boundary&#xD;
																		State := 2000;&#xD;
																	END_IF;&#xD;
		&#xD;
		eFun#Fn16_WriteMultipleRegisters:	IF UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal) &gt;= LOWER_BOUND(HoldingRegisters, 1) AND UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal + Requests[RequestPnt].Write.Count - 1)  &lt;= UPPER_BOUND(HoldingRegisters, 1) THEN&#xD;
																		State := DINT_TO_UINT(100 + EnumToNum(Requests[RequestPnt].FunctionCode));&#xD;
&#xD;
																		SendAr[0] := UINT_TO_BYTE(Requests[RequestPnt].NodeAdr);&#xD;
																		SendAr[1] := DINT_TO_BYTE(Requests[RequestPnt].FunctionCode);&#xD;
																		ToAryByte(Requests[RequestPnt].Write.StartAddressRemote, _HIGH_LOW, SendAr[2]);&#xD;
																		ToAryByte(Requests[RequestPnt].Write.Count, _HIGH_LOW, SendAr[4]);&#xD;
																		BytePnt := 7;&#xD;
																		FOR i := Requests[RequestPnt].Write.StartAddressLocal TO (Requests[RequestPnt].Write.StartAddressLocal + Requests[RequestPnt].Write.Count -1) DO&#xD;
																			ToAryByte(HoldingRegisters[i], _HIGH_LOW, SendAr[BytePnt]);&#xD;
																			BytePnt := BytePnt + UINT#2;&#xD;
																		END_FOR;&#xD;
																		SendAr[6] := UINT_TO_BYTE(Requests[RequestPnt].Write.Count * UINT#2); //Number of bytes containing written data&#xD;
&#xD;
																		CRC_Word := AryCRC16(In := SendAr[0], Size := BytePnt);&#xD;
																		ToAryByte(In := CRC_Word, Order := _eBYTE_ORDER#_HIGH_LOW, AryOut := SendAr[BytePnt]);&#xD;
																		BytePnt := BytePnt + 2;&#xD;
																		&#xD;
																		PacketSize := BytePnt;&#xD;
																		State := 110;&#xD;
																	ELSE&#xD;
																		//Address error&#xD;
																		ErrorRequestNO := RequestPnt;&#xD;
																		ErrorID := 16#1001; //Modbus address outside of Array boundary&#xD;
																		State := 2000;&#xD;
																	END_IF;&#xD;
&#xD;
&#xD;
		eFun#Fn23_WriteReadMultipleRegisters:	IF UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal) &gt;= LOWER_BOUND(HoldingRegisters, 1) AND UINT_TO_DINT(Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1)  &lt;= UPPER_BOUND(HoldingRegisters, 1) AND&#xD;
																				UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal) &gt;= LOWER_BOUND(HoldingRegisters, 1) AND UINT_TO_DINT(Requests[RequestPnt].Write.StartAddressLocal + Requests[RequestPnt].Write.Count - 1)  &lt;= UPPER_BOUND(HoldingRegisters, 1) THEN&#xD;
																				State := DINT_TO_UINT(100 + EnumToNum(Requests[RequestPnt].FunctionCode));&#xD;
																			&#xD;
																				SendAr[0] := UINT_TO_BYTE(Requests[RequestPnt].NodeAdr);&#xD;
																				SendAr[1] := DINT_TO_BYTE(Requests[RequestPnt].FunctionCode);&#xD;
																				ToAryByte(Requests[RequestPnt].Read.StartAddressRemote, _HIGH_LOW, SendAr[2]);&#xD;
																				ToAryByte(Requests[RequestPnt].Read.Count, _HIGH_LOW, SendAr[4]);&#xD;
																				ToAryByte(Requests[RequestPnt].Write.StartAddressRemote, _HIGH_LOW, SendAr[6]);&#xD;
																				ToAryByte(Requests[RequestPnt].Write.Count, _HIGH_LOW, SendAr[8]);&#xD;
																				BytePnt := 11;&#xD;
																				FOR i := Requests[RequestPnt].Write.StartAddressLocal TO (Requests[RequestPnt].Write.StartAddressLocal + Requests[RequestPnt].Write.Count -1) DO&#xD;
																					ToAryByte(HoldingRegisters[i], _HIGH_LOW, SendAr[BytePnt]);&#xD;
																					BytePnt := BytePnt + UINT#2;&#xD;
																				END_FOR;&#xD;
																				SendAr[10] := UINT_TO_BYTE(Requests[RequestPnt].Write.Count * UINT#2); //Number of bytes containing written data&#xD;
																				&#xD;
																				CRC_Word := AryCRC16(In := SendAr[0], Size := BytePnt);&#xD;
																				ToAryByte(In := CRC_Word, Order := _eBYTE_ORDER#_HIGH_LOW, AryOut := SendAr[BytePnt]);&#xD;
																				BytePnt := BytePnt + 2;&#xD;
																				&#xD;
																				PacketSize := BytePnt;&#xD;
																				State := 110;&#xD;
																			ELSE&#xD;
																				//Address error&#xD;
																				ErrorRequestNO := RequestPnt;&#xD;
																				ErrorID := 16#1001; //Modbus address outside of Array boundary&#xD;
																				State := 2000;&#xD;
																			END_IF;&#xD;
&#xD;
	ELSE&#xD;
		//Invalid function code&#xD;
		ErrorRequestNO := RequestPnt;&#xD;
		ErrorID := 16#1002; //Invalid modbus function code&#xD;
		State := 2000;&#xD;
	END_CASE;&#xD;
END_IF;&#xD;
&#xD;
IF State = 110 THEN&#xD;
	IF PacketSize &lt; SizeOfAry(SendAr) THEN&#xD;
		SendCfg.StartTrig := _eSERIAL_START#_SERIAL_START_NONE;&#xD;
		SendCfg.EndTrig := _eSERIAL_END#_SERIAL_END_NONE;&#xD;
		iNX_SerialSend(Execute := FALSE, DevicePort := DevicePort, SendDat := SendAr[0], SendSize := PacketSize);&#xD;
		State := 120;&#xD;
	ELSE&#xD;
		ErrorRequestNO := RequestPnt;&#xD;
		ErrorID := 16#2012; //Too many bytes in packet&#xD;
		State := 2000;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 120 THEN&#xD;
	iNX_SerialSend(Execute := TRUE, DevicePort := DevicePort, SendDat := SendAr[0], SendSize := PacketSize);&#xD;
	IF NOT iNX_SerialSend.Busy THEN&#xD;
		IF iNX_SerialSend.Done THEN&#xD;
			State := 130;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iNX_SerialSend.Error THEN&#xD;
			ErrorRequestNO := RequestPnt;&#xD;
			ErrorID := iNX_SerialSend.ErrorID;&#xD;
			ErrorIDEx := 0;&#xD;
			State := 2000;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 130 THEN&#xD;
	RcvCfg.StartTrig := _eSERIAL_START#_SERIAL_START_NONE;&#xD;
	RcvCfg.EndTrig := _eSERIAL_END#_SERIAL_END_NONE;&#xD;
	RcvBytePnt := 0;&#xD;
	//RcvCfg.RcvSizeCfg := 5 + (Requests[RequestPnt].Read.Count * 2);&#xD;
	RcvOption.TimeOut := TimeOut;&#xD;
	RcvTimeOut := NodeTimeOut;&#xD;
	Clear(RcvAr);&#xD;
	State := 131;&#xD;
END_IF;&#xD;
&#xD;
IF State = 131 THEN&#xD;
	iNX_SerialRcv(Execute := FALSE, DevicePort := DevicePort, RcvDat := RcvAr[0], Size := 255, RcvCfg := RcvCfg, Option := RcvOption);&#xD;
	State := 140;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
IF State = 140 THEN&#xD;
	iNX_SerialRcv(Execute := TRUE, DevicePort := DevicePort, RcvDat := RcvAr[RcvBytePnt], Size := 255, RcvCfg := RcvCfg, Option := RcvOption);&#xD;
	RcvTimeOut := SUB_TIME(RcvTimeOut, GetMyTaskInterval());&#xD;
	IF NOT iNX_SerialRcv.Busy THEN&#xD;
		IF iNX_SerialRcv.Done THEN&#xD;
			RcvBytePnt := RcvBytePnt + iNX_SerialRcv.RcvSize;&#xD;
			IF StatusFlag_EndDetection AND RcvBytePnt &gt; 0 THEN&#xD;
				//Receive completed&#xD;
				RcvdBytes := RcvBytePnt;&#xD;
				State := 150;&#xD;
			ELSE&#xD;
				State := 131; //Not completed the read yet&#xD;
			END_IF;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iNX_SerialRcv.Error THEN&#xD;
			ErrorRequestNO := RequestPnt;&#xD;
			ErrorID := iNX_SerialRcv.ErrorID;&#xD;
			ErrorIDEx := 0;&#xD;
			State := 2000;&#xD;
		END_IF;&#xD;
		&#xD;
		IF RcvTimeOut &lt;= T#0s THEN&#xD;
			ErrorRequestNO := RequestPnt;&#xD;
			ErrorID := 16#0C0B;&#xD;
			ErrorIDEx := 0;&#xD;
			&#xD;
			State := 2000;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
IF State = 150 THEN&#xD;
//Received response from the slave&#xD;
&#xD;
	IF SendAr[0] = RcvAr[0] THEN&#xD;
		//Modbus slave address match&#xD;
		IF SendAr[1] = RcvAr[1] THEN&#xD;
			//Function Code match&#xD;
			CASE Requests[RequestPnt].FunctionCode OF&#xD;
				eFun#Fn01_ReadCoils:								ModbusByteCount := BYTE_TO_UINT(RcvAr[2]);&#xD;
																				AryByteTo(In := RcvAr[3 + ModbusByteCount], Size := 2, Order := _HIGH_LOW, OutVal := CRC_Word_Rcvd);&#xD;
																				CRC_Word := AryCRC16(In := RcvAr[0], Size := 3 + ModbusByteCount);&#xD;
																				IF CRC_Word = CRC_Word_Rcvd THEN&#xD;
																					BitPnt := 0;&#xD;
																					BytePnt := 3;&#xD;
																					FOR i := Requests[RequestPnt].Read.StartAddressLocal TO (Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1) DO&#xD;
																						Coils[i] := TestABit(In := RcvAr[BytePnt], Pos := BitPnt);&#xD;
																						Inc(BitPnt);&#xD;
																						IF BitPnt &gt;= 8 THEN&#xD;
																							Inc(BytePnt);&#xD;
																							BitPnt := 0;&#xD;
																							Dec(ModbusByteCount);&#xD;
																							IF ModbusByteCount = 0 THEN&#xD;
																								EXIT;&#xD;
																							END_IF;&#xD;
																						END_IF;&#xD;
																					END_FOR;&#xD;
																					State := 1000;&#xD;
																				ELSE&#xD;
																					//CRC Mismatch&#xD;
																					ErrorRequestNO := RequestPnt;&#xD;
																					ErrorID := 16#1006; // Wrong CRC&#xD;
																					ErrorIDEx := 0;&#xD;
																					State := 2000;&#xD;
																				END_IF;&#xD;
																				&#xD;
				eFun#Fn02_ReadDiscreteInputs:				ModbusByteCount := BYTE_TO_UINT(RcvAr[2]);&#xD;
																				AryByteTo(In := RcvAr[3 + ModbusByteCount], Size := 2, Order := _HIGH_LOW, OutVal := CRC_Word_Rcvd);&#xD;
																				CRC_Word := AryCRC16(In := RcvAr[0], Size := 3 + ModbusByteCount);&#xD;
																				IF CRC_Word = CRC_Word_Rcvd THEN&#xD;
																					BitPnt := 0;&#xD;
																					BytePnt := 3;&#xD;
																					FOR i := Requests[RequestPnt].Read.StartAddressLocal TO (Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1) DO&#xD;
																						DiscreteInputs[i] := TestABit(In := RcvAr[BytePnt], Pos := BitPnt);&#xD;
																						Inc(BitPnt);&#xD;
																						IF BitPnt &gt;= 8 THEN&#xD;
																							Inc(BytePnt);&#xD;
																							BitPnt := 0;&#xD;
																							Dec(ModbusByteCount);&#xD;
																							IF ModbusByteCount = 0 THEN&#xD;
																								EXIT;&#xD;
																							END_IF;&#xD;
																						END_IF;&#xD;
																					END_FOR;&#xD;
																					State := 1000;&#xD;
																				ELSE&#xD;
																					//CRC Mismatch&#xD;
																					ErrorRequestNO := RequestPnt;&#xD;
																					ErrorID := 16#1006; // Wrong CRC&#xD;
																					ErrorIDEx := 0;&#xD;
																					State := 2000;&#xD;
																				END_IF;&#xD;
																				&#xD;
				eFun#Fn03_ReadHoldingRegisters:			ModbusByteCount := BYTE_TO_UINT(RcvAr[2]);&#xD;
																				AryByteTo(In := RcvAr[3 + ModbusByteCount], Size := 2, Order := _HIGH_LOW, OutVal := CRC_Word_Rcvd);&#xD;
																				CRC_Word := AryCRC16(In := RcvAr[0], Size := 3 + ModbusByteCount);&#xD;
																				IF CRC_Word = CRC_Word_Rcvd THEN&#xD;
																					IF ModbusByteCount = (Requests[RequestPnt].Read.Count * UINT#2) THEN&#xD;
																						BytePnt := UINT#3;&#xD;
																						FOR i := Requests[RequestPnt].Read.StartAddressLocal TO (Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1) DO&#xD;
																							AryByteTo(In := RcvAr[BytePnt], Size := UINT#2, Order := _HIGH_LOW, OutVal := HoldingRegisters[i]);&#xD;
																							BytePnt := BytePnt + UINT#2;&#xD;
																						END_FOR;&#xD;
																						State := 1000;&#xD;
																					ELSE&#xD;
																						ErrorRequestNO := RequestPnt;&#xD;
																						ErrorID := 16#1010; //Mismatch of bytes in response&#xD;
																						State := 2000;&#xD;
																					END_IF;&#xD;
																				ELSE&#xD;
																					//CRC Mismatch&#xD;
																					ErrorRequestNO := RequestPnt;&#xD;
																					ErrorID := 16#1006; // Wrong CRC&#xD;
																					ErrorIDEx := 0;&#xD;
																					State := 2000;&#xD;
																				END_IF;&#xD;
																				&#xD;
																				&#xD;
				eFun#Fn04_ReadInputRegisters:				ModbusByteCount := BYTE_TO_UINT(RcvAr[2]);&#xD;
																				AryByteTo(In := RcvAr[3 + ModbusByteCount], Size := 2, Order := _HIGH_LOW, OutVal := CRC_Word_Rcvd);&#xD;
																				CRC_Word := AryCRC16(In := RcvAr[0], Size := 3 + ModbusByteCount);&#xD;
																				IF CRC_Word = CRC_Word_Rcvd THEN&#xD;
																					IF ModbusByteCount = (Requests[RequestPnt].Read.Count * UINT#2) THEN&#xD;
																						BytePnt := UINT#3;&#xD;
																						FOR i := Requests[RequestPnt].Read.StartAddressLocal TO (Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1) DO&#xD;
																							AryByteTo(In := RcvAr[BytePnt], Size := UINT#2, Order := _HIGH_LOW, OutVal := InputRegisters[i]);&#xD;
																							BytePnt := BytePnt + UINT#2;&#xD;
																						END_FOR;&#xD;
																						State := 1000;&#xD;
																					ELSE&#xD;
																						ErrorRequestNO := RequestPnt;&#xD;
																						ErrorID := 16#1010; //Mismatch of bytes in response&#xD;
																						State := 2000;&#xD;
																					END_IF;&#xD;
																				ELSE&#xD;
																					//CRC Mismatch&#xD;
																					ErrorRequestNO := RequestPnt;&#xD;
																					ErrorID := 16#1006; // Wrong CRC&#xD;
																					ErrorIDEx := 0;&#xD;
																					State := 2000;&#xD;
																				END_IF;&#xD;
																				&#xD;
				eFun#Fn05_WriteSingleCoil:					&#xD;
																				IF RcvAr[2] = SendAr[2] AND RcvAr[3] = SendAr[3] THEN&#xD;
																					//Address match&#xD;
																					State := 1000;&#xD;
																				ELSE&#xD;
																					ErrorRequestNO := RequestPnt;&#xD;
																					ErrorID := 16#1011; //Mismatch written address in response&#xD;
																					State := 2000;&#xD;
																				END_IF;&#xD;
				&#xD;
				eFun#Fn06_WriteSingleRegister:					&#xD;
																				IF RcvAr[2] = SendAr[2] AND RcvAr[3] = SendAr[3] THEN&#xD;
																					//Address match&#xD;
																					State := 1000;&#xD;
																				ELSE&#xD;
																					ErrorRequestNO := RequestPnt;&#xD;
																					ErrorID := 16#1011; //Mismatch written address in response&#xD;
																					State := 2000;&#xD;
																				END_IF;&#xD;
																				&#xD;
				eFun#Fn15_WriteMultipleCoils:					&#xD;
																				IF RcvAr[2] = SendAr[2] AND RcvAr[3] = SendAr[3] THEN&#xD;
																					//Address match&#xD;
																					State := 1000;&#xD;
																				ELSE&#xD;
																					ErrorRequestNO := RequestPnt;&#xD;
																					ErrorID := 16#1011; //Mismatch written address in response&#xD;
																					State := 2000;&#xD;
																				END_IF;&#xD;
				&#xD;
				eFun#Fn16_WriteMultipleRegisters:					&#xD;
																				IF RcvAr[2] = SendAr[2] AND RcvAr[3] = SendAr[3] THEN&#xD;
																					//Address match&#xD;
																					State := 1000;&#xD;
																				ELSE&#xD;
																					ErrorRequestNO := RequestPnt;&#xD;
																					ErrorID := 16#1011; //Mismatch written address in response&#xD;
																					State := 2000;&#xD;
																				END_IF;&#xD;
				&#xD;
				&#xD;
				eFun#Fn23_WriteReadMultipleRegisters:		ModbusByteCount := BYTE_TO_UINT(RcvAr[2]);&#xD;
																						AryByteTo(In := RcvAr[3 + ModbusByteCount], Size := 2, Order := _HIGH_LOW, OutVal := CRC_Word_Rcvd);&#xD;
																						CRC_Word := AryCRC16(In := RcvAr[0], Size := 3 + ModbusByteCount);&#xD;
																						IF CRC_Word = CRC_Word_Rcvd THEN&#xD;
																							IF ModbusByteCount = (Requests[RequestPnt].Read.Count * UINT#2) THEN&#xD;
																								BytePnt := UINT#3;&#xD;
																								FOR i := Requests[RequestPnt].Read.StartAddressLocal TO (Requests[RequestPnt].Read.StartAddressLocal + Requests[RequestPnt].Read.Count - 1) DO&#xD;
																									AryByteTo(In := RcvAr[BytePnt], Size := UINT#2, Order := _HIGH_LOW, OutVal := HoldingRegisters[i]);&#xD;
																									BytePnt := BytePnt + UINT#2;&#xD;
																								END_FOR;&#xD;
																								State := 1000;&#xD;
																							ELSE&#xD;
																								ErrorRequestNO := RequestPnt;&#xD;
																								ErrorID := 16#1010; //Mismatch of bytes in response&#xD;
																								State := 2000;&#xD;
																							END_IF;&#xD;
																						ELSE&#xD;
																							//CRC Mismatch&#xD;
																							ErrorRequestNO := RequestPnt;&#xD;
																							ErrorID := 16#1006; // Wrong CRC&#xD;
																							ErrorIDEx := 0;&#xD;
																							State := 2000;&#xD;
																						END_IF;&#xD;
				&#xD;
				&#xD;
			ELSE&#xD;
				ErrorRequestNO := RequestPnt;&#xD;
				ErrorID := 16#1013; //Unknown function code&#xD;
				State := 2000;&#xD;
			END_CASE;&#xD;
		ELSE&#xD;
			IF BYTE_TO_UINT(RcvAr[1]) = BYTE_TO_UINT(SendAr[1]) + UINT#16#80 THEN&#xD;
				ErrorID := 16#0C10; //Exceptional Modbus Response&#xD;
				ErrorIDEx := BYTE_TO_DWORD(RcvAr[2]); // Exception code from modbus&#xD;
			ELSE&#xD;
				ErrorID := 16#1009; // Function code mismatch&#xD;
			END_IF;&#xD;
			ErrorRequestNO := RequestPnt;&#xD;
			State := 2000;&#xD;
		END_IF;&#xD;
	ELSE&#xD;
		ErrorRequestNO := RequestPnt;&#xD;
		ErrorID := 16#1008;	//Modbus slave address mismatch&#xD;
		State := 2000;&#xD;
	END_IF;&#xD;
&#xD;
END_IF;&#xD;
&#xD;
&#xD;
IF State = 1000 THEN&#xD;
	//Request finished&#xD;
	Inc(RequestPnt);&#xD;
	IF RequestPnt &gt; UPPER_BOUND(Requests, 1) THEN&#xD;
		State := 3000;&#xD;
	ELSE&#xD;
		State := 10;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
&#xD;
IF State = 2000 THEN&#xD;
	//Error&#xD;
	//Making a one shot&#xD;
	IF Error THEN&#xD;
		Error := FALSE;&#xD;
		State := 1000;&#xD;
	ELSE&#xD;
		Error := TRUE;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 3000 THEN&#xD;
	//Finished with Request cycle&#xD;
	CycleTime_ns := ULINT_TO_LINT(Get1msCnt() - RequestCycleStart) * 1000000;&#xD;
	RequestCycleTime := NanoSecToTime(CycleTime_ns);&#xD;
	State := 3010;&#xD;
END_IF;&#xD;
&#xD;
IF State = 3010 THEN&#xD;
	//Making a one shot&#xD;
	IF RequestCycleDone THEN&#xD;
		RequestCycleDone := FALSE;&#xD;
		State := 0;&#xD;
	ELSE&#xD;
		RequestCycleDone := TRUE;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
</Text></StructuredTextModel>