<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>IF (Enable) THEN&#xD;
	(* Transfer Speed *)&#xD;
	ToAryByte(Modbus_Data_Table.Registers[0], _HIGH_LOW, Bit_Array1[0]);&#xD;
	My_Feed_Sequence.Vel := Word_To_INT(PackWord(Bit_Array1[0], Bit_Array1[1]));&#xD;
	(* Transfer Acceleration *)&#xD;
	ToAryByte(Modbus_Data_Table.Registers[1], _HIGH_LOW, Bit_Array1[0]);&#xD;
	My_Feed_Sequence.Accel := Word_To_INT(PackWord(Bit_Array1[0], Bit_Array1[1]));&#xD;
	(* Transfer Deceleration *)&#xD;
	ToAryByte(Modbus_Data_Table.Registers[2], _HIGH_LOW, Bit_Array1[0]);&#xD;
	My_Feed_Sequence.Decel := Word_To_LREAL(PackWord(Bit_Array1[0], Bit_Array1[1]));&#xD;
	(* Transfer Number of steps to make *)&#xD;
	ToAryByte(Modbus_Data_Table.Registers[3], _HIGH_LOW, Bit_Array1[0]);&#xD;
	My_Feed_Sequence.No_Of_Steps := WORD_TO_INT(PackWord(Bit_Array1[0], Bit_Array1[1]));&#xD;
	(* Transfer the profile type to make *)&#xD;
	ToAryByte(Modbus_Data_Table.Registers[4], _HIGH_LOW, Bit_Array1[0]);&#xD;
	//My_Feed_Sequence.Profile_Type := WORD_TO_INT(PackWord(Bit_Array1[0], Bit_Array1[1]));&#xD;
	(* Transfer the profile length to make *)&#xD;
	ToAryByte(Modbus_Data_Table.Registers[5], _HIGH_LOW, Bit_Array1[0]);&#xD;
	ToAryByte(Modbus_Data_Table.Registers[6], _HIGH_LOW, Bit_Array2[0]);&#xD;
	//My_Feed_Sequence.Profile_Length := CopyDwordToReal(PackDword(Bit_Array1[0], Bit_Array1[1], Bit_Array2[0], Bit_Array2[1]));&#xD;
	&#xD;
	(* Start with the index at number 7 which is the value of the first gag *)&#xD;
	K := 7;&#xD;
	FOR I:=0 TO My_Feed_Sequence.No_Of_Steps BY 1 DO&#xD;
		(* Transfer the gag *)&#xD;
		ToAryByte(Modbus_Data_Table.Registers[K], _HIGH_LOW, Bit_Array1[0]);&#xD;
		My_Feed_Sequence.Gag[I] := WORD_TO_INT(PackWord(Bit_Array1[0], Bit_Array1[1]));&#xD;
		(* Transfer the feed values *)&#xD;
		ToAryByte(Modbus_Data_Table.Registers[K+1], _HIGH_LOW, Bit_Array1[0]);&#xD;
		ToAryByte(Modbus_Data_Table.Registers[K+2], _HIGH_LOW, Bit_Array2[0]);&#xD;
		My_Feed_Sequence.Distance[I] := CopyDwordToReal(PackDword(Bit_Array1[0], Bit_Array1[1], Bit_Array2[0], Bit_Array2[1]));&#xD;
		(* Increment by three since there are three words (1 for gag and 2 for feed) in each step *)&#xD;
		K := K+3;&#xD;
	END_FOR;&#xD;
	Done := TRUE;&#xD;
ELSE&#xD;
	Done := FALSE;&#xD;
END_IF;</Text></StructuredTextModel>