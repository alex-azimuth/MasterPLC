<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>Enable_R(Clk:=Enable);&#xD;
&#xD;
IF (Enable) THEN&#xD;
	IF (Enable_R.Q) THEN&#xD;
		// Cannot use in variable as INOUT&#xD;
		Sorted_Array := InSequence;&#xD;
		// Make sure the elements that have 0 are sorted at the end of the array and not the beginning&#xD;
		FOR I:=0 TO Size-1 DO&#xD;
			IF (Sorted_Array[I].Feed = 0) AND&#xD;
				(Sorted_Array[I].Punch = 0) THEN&#xD;
				Sorted_Array[I].Feed := 999999999;&#xD;
			END_IF;&#xD;
		END_FOR;&#xD;
		// Begin sorting&#xD;
		Sort_Trigger := TRUE;&#xD;
	END_IF;&#xD;
	&#xD;
	Sort_Trigger_TON(In:=Sort_Trigger, PT:=T#0.25s);&#xD;
	&#xD;
	// Sort array as per member Feed&#xD;
	SortFunc(&#xD;
		Execute:=Sort_Trigger_TON.Q, &#xD;
		InOut:=Sorted_Array[0],&#xD;
		Size:=Size, &#xD;
		Member:=Sorted_Array[0].Feed, &#xD;
		Order:=_ASC,&#xD;
		Error=&gt;SortFunc_Error,&#xD;
		Busy=&gt;SortFunc_Busy&#xD;
		);&#xD;
	// Sorting is finished&#xD;
	IF (SortFunc.Done) THEN&#xD;
		// Re-attribute the correct feed to elements that were set a very high number&#xD;
		FOR I:=0 TO Size-1 DO&#xD;
			IF (Sorted_Array[I].Feed = 999999999) THEN&#xD;
				Sorted_Array[I].Feed := 0;&#xD;
			END_IF;&#xD;
		END_FOR;&#xD;
		// Assign the sorted array to the output variable&#xD;
		OutSequence := Sorted_Array;&#xD;
		Done := SortFunc.Done;&#xD;
		// Make sure we do not sort again once finished in order to preserve CPU cycles&#xD;
		Sort_Trigger := NOT Done;&#xD;
	END_IF;&#xD;
ELSE&#xD;
	Done := FALSE;&#xD;
	Sort_Trigger := FALSE;&#xD;
END_IF;</Text></StructuredTextModel>