<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>IF Enable THEN&#xD;
	IF ConnectState = 0 THEN&#xD;
		ConnectState := 10;&#xD;
		FOR i := LOWER_BOUND(SktDoClose, 1) TO UPPER_BOUND(SktDoClose, 1) DO&#xD;
			IF SktDoClose[i] THEN&#xD;
				ConnectState := 0; //Avoid opening a socket while closing any of the sockets&#xD;
			END_IF;&#xD;
		END_FOR;&#xD;
		&#xD;
	END_IF;&#xD;
ELSE&#xD;
	//Close all sockets&#xD;
	FOR i := LOWER_BOUND(SktDoClose, 1) TO UPPER_BOUND(SktDoClose, 1) DO&#xD;
		IF SktConnected[i] AND (NOT iSktTCPSend[i].Busy) THEN&#xD;
			SktDoClose[i] := TRUE;&#xD;
			ConnectState := 0;&#xD;
		END_IF;&#xD;
	END_FOR;&#xD;
END_IF;&#xD;
&#xD;
IF ConnectState = 10 THEN&#xD;
	IF NoOfClientsConnected &lt; MaxNoOfClients THEN&#xD;
		FOR i := LOWER_BOUND(SktConnected, 1) TO UPPER_BOUND(SktConnected, 1) DO&#xD;
			IF NOT SktConnected[i] THEN&#xD;
				NextSocketPnt := i;&#xD;
				EXIT;&#xD;
			END_IF;&#xD;
		END_FOR;&#xD;
		iSktTCPAccept(Execute := FALSE, SrcTcpPort := Port_No, Socket =&gt; Socket[NextSocketPnt], TimeOut := 20);&#xD;
		ConnectState := 20;&#xD;
	ELSE&#xD;
		ConnectState := 0;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF ConnectState = 20 THEN&#xD;
	iSktTCPAccept(Execute := TRUE, SrcTcpPort := Port_No, Socket =&gt; Socket[NextSocketPnt], TimeOut := 20);&#xD;
	&#xD;
	IF NOT iSktTCPAccept.Busy THEN&#xD;
		IF iSktTCPAccept.Done THEN&#xD;
			ConnectState := 0; //Check for new connections&#xD;
			SktConnected[NextSocketPnt] := TRUE;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iSktTCPAccept.Error THEN&#xD;
			ConnectState := 0;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF CloseState = 0 THEN&#xD;
	FOR i := LOWER_BOUND(SktDoClose, 1) TO UPPER_BOUND(SktDoClose, 1) DO&#xD;
		IF SktDoClose[i] THEN&#xD;
			SktToClosePnt := i;&#xD;
			CloseState := 10;&#xD;
			EXIT;&#xD;
		END_IF;&#xD;
	END_FOR;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
IF CloseState = 10 THEN&#xD;
	iSktClose(Execute := FALSE, Socket := Socket[SktToClosePnt]);&#xD;
	CloseState :=20;&#xD;
END_IF;&#xD;
&#xD;
IF CloseState = 20 THEN&#xD;
	iSktClose(Execute := TRUE, Socket := Socket[SktToClosePnt]);&#xD;
	IF NOT iSktClose.Busy THEN&#xD;
		SktConnected[SktToClosePnt] := FALSE;&#xD;
		SktDoClose[SktToClosePnt] := FALSE;&#xD;
		CloseState := 0;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
FOR i := LOWER_BOUND(Socket, 1) TO UPPER_BOUND(Socket, 1) DO&#xD;
	IF SktConnected[i] AND SktState[i] = 0 AND (NOT SktDoClose[i]) THEN&#xD;
		SktState[i] := 100;&#xD;
	END_IF;&#xD;
	&#xD;
	IF SktState[i] = 100 THEN&#xD;
		iSktGetTCPStatus[i](Execute := FALSE, Socket := Socket[i]);&#xD;
		SktState[i] := 110;&#xD;
	END_IF;&#xD;
	&#xD;
	&#xD;
	IF SktState[i] = 110 THEN&#xD;
		iSktGetTCPStatus[i](Execute := TRUE, Socket := Socket[i]);&#xD;
		IF NOT iSktGetTCPStatus[i].Busy THEN&#xD;
			IF iSktGetTCPStatus[i].Done THEN&#xD;
				IF iSktGetTCPStatus[i].DatRcvFlag THEN&#xD;
					SktState[i] :=150;&#xD;
				ELSE&#xD;
					SktState[i] := 100;&#xD;
					//IF SendDat_Ex THEN&#xD;
						//State := 200;&#xD;
					//END_IF;&#xD;
					&#xD;
					IF iSktGetTCPStatus[i].TcpStatus &lt;&gt;_eCONNECTION_STATE#_ESTABLISHED THEN&#xD;
						SktConnected[i] := FALSE;&#xD;
						SktDoClose[i] := TRUE;&#xD;
						SktState[i] := 0;&#xD;
					END_IF;&#xD;
				END_IF;&#xD;
			END_IF;&#xD;
			&#xD;
			IF iSktGetTCPStatus[i].Error THEN&#xD;
				SktConnected[i] := FALSE;&#xD;
				SktDoClose[i] := TRUE;&#xD;
				SktState[i] := 0;&#xD;
			END_IF;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
	&#xD;
	&#xD;
	IF SktState[i] = 150 THEN		(* Data received *)&#xD;
		iSktTCPRcv[i](Execute :=FALSE, RcvDat :=RcvDat[0]);&#xD;
		SktState[i] :=160;&#xD;
	END_IF;&#xD;
&#xD;
	IF SktState[i] =160 THEN		(* Data received *)&#xD;
		iSktTCPRcv[i](Execute :=TRUE, Socket := Socket[i], TimeOut := UINT#20, Size := UINT#2000, RcvDat := RcvDat[0]);&#xD;
		&#xD;
		IF iSktTCPRcv[i].Done THEN&#xD;
			SktState[i] := 170;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iSktTCPRcv[i].Error THEN&#xD;
			SktConnected[i] := FALSE;&#xD;
			SktDoClose[i] := TRUE;&#xD;
			SktState[i] := 0;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
	&#xD;
	&#xD;
	IF SktState[i] = 170 THEN&#xD;
		Funct_Code:= BYTE_TO_INT(RcvDat[7]);&#xD;
		&#xD;
		AryMove(RcvDat[0], SendDat[0], USINT#12);								// copy MBAP header and the two following word into the response&#xD;
		AryByteTo(RcvDat[8], UINT#2, _HIGH_LOW, Address);						// address	&#xD;
		AryByteTo(RcvDat[10], UINT#2, _HIGH_LOW, Qty);							// quantity&#xD;
&#xD;
		CASE Funct_Code OF&#xD;
			&#xD;
			1: // Read Coils&#xD;
			&#xD;
					IF UseAccesslist THEN&#xD;
						AccessGranted := FALSE;&#xD;
						FOR j := LOWER_BOUND(AccessList, 1) TO UPPER_BOUND(AccessList, 1) DO&#xD;
							IF AccessList[j].RegisterType = eRegisterType#Coil THEN&#xD;
								IF AccessList[j].AccessType = eAccess#R OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(Address) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(Address) + Qty) &lt;= (AccessList[j].AddressArea.StartAddress +AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGranted := TRUE;&#xD;
										EXIT;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
					ELSE&#xD;
						AccessGranted := TRUE;&#xD;
					END_IF;&#xD;
						&#xD;
					&#xD;
					IF Qty = 0 or (Address &lt; LOWER_BOUND(Coils, 1) OR (Address+ Qty) &gt; UPPER_BOUND(Coils, 1)) OR NOT AccessGranted THEN 													// Illegal Data Address&#xD;
						SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
						SendDat[8]:=02;&#xD;
						SktSend_Size[i]:=	9;&#xD;
					ELSE&#xD;
						idxByte := 9;&#xD;
						Clear(SendDat[idxByte]);&#xD;
						idxBit := 0;&#xD;
						FOR j := Address TO Address + Qty -1 DO&#xD;
							OutABit(InOut := SendDat[idxByte], Pos := UINT_TO_USINT(idxBit), BitVal := Coils[j]);&#xD;
							Inc(idxBit);&#xD;
							IF j &lt; Address + Qty -1 THEN&#xD;
								IF idxBit &gt;= UINT#8 THEN&#xD;
									idxBit := 0;&#xD;
									Inc(idxByte);&#xD;
									Clear(SendDat[idxByte]);&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
						SendDat[8]:= 	UINT_TO_BYTE(idxByte - 8);					// Byte number containing the coils			&#xD;
						SendDat[5]:= 	UINT_TO_BYTE(idxByte - 5);					// MBAP Header qty&#xD;
						SktSend_Size[i] :=			idxByte +1 ;											// total size for TCP_Send function	&#xD;
					END_IF;&#xD;
&#xD;
			2: // Read discret inputs&#xD;
					IF UseAccesslist THEN&#xD;
						AccessGranted := FALSE;&#xD;
						FOR j := LOWER_BOUND(AccessList, 1) TO UPPER_BOUND(AccessList, 1) DO&#xD;
							IF AccessList[j].RegisterType = eRegisterType#DiscreteInput THEN&#xD;
								IF AccessList[j].AccessType = eAccess#R OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(Address) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(Address) + Qty) &lt;= (AccessList[j].AddressArea.StartAddress +AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGranted := TRUE;&#xD;
										EXIT;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
					ELSE&#xD;
						AccessGranted := TRUE;&#xD;
					END_IF;&#xD;
					&#xD;
					IF Qty = 0 or (Address &lt; LOWER_BOUND(DiscreteInputs, 1) OR (Address+ Qty) &gt; UPPER_BOUND(DiscreteInputs, 1)) OR NOT AccessGranted THEN 													// Illegal Data Address&#xD;
						SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
						SendDat[8]:=02;&#xD;
						SktSend_Size[i]:=	9;&#xD;
					ELSE&#xD;
						idxByte := 9;&#xD;
						Clear(SendDat[idxByte]);&#xD;
						idxBit := 0;&#xD;
						FOR j := Address TO Address + Qty -1 DO&#xD;
							OutABit(InOut := SendDat[idxByte], Pos := UINT_TO_USINT(idxBit), BitVal := DiscreteInputs[j]);&#xD;
							Inc(idxBit);&#xD;
							IF j &lt; Address + Qty -1 THEN&#xD;
								IF idxBit &gt;= UINT#8 THEN&#xD;
									idxBit := 0;&#xD;
									Inc(idxByte);&#xD;
									Clear(SendDat[idxByte]);&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
						SendDat[8]:= 	UINT_TO_BYTE(idxByte - 8);					// Byte number containing the coils			&#xD;
						SendDat[5]:= 	UINT_TO_BYTE(idxByte - 5);					// MBAP Header qty&#xD;
						SktSend_Size[i] :=			idxByte +1 ;											// total size for TCP_Send function	&#xD;
					END_IF;&#xD;
&#xD;
		&#xD;
			3:  // Read Holding Registers	Fn03&#xD;
					IF UseAccesslist THEN&#xD;
						AccessGranted := FALSE;&#xD;
						FOR j := LOWER_BOUND(AccessList, 1) TO UPPER_BOUND(AccessList, 1) DO&#xD;
							IF AccessList[j].RegisterType = eRegisterType#HoldingRegister THEN&#xD;
								IF AccessList[j].AccessType = eAccess#R OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(Address) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(Address) + Qty) &lt;= (AccessList[j].AddressArea.StartAddress +AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGranted := TRUE;&#xD;
										EXIT;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
					ELSE&#xD;
						AccessGranted := TRUE;&#xD;
					END_IF;&#xD;
				&#xD;
				&#xD;
					IF Qty = 0 or (Address &lt; LOWER_BOUND(HoldingRegisters, 1) OR (Address+ Qty) &gt; UPPER_BOUND(HoldingRegisters, 1)) OR NOT AccessGranted THEN 													// wrong quantity&#xD;
						SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
						SendDat[8]:=02;&#xD;
						SktSend_Size[i] :=	9;&#xD;
&#xD;
					ELSE	&#xD;
						idxByte	 :=9;											// initialize index&#xD;
						FOR j:= 1 TO Qty DO																	// add register in the send request&#xD;
							ToAryByte(HoldingRegisters[Address-1 + j],_HIGH_LOW,SendDat[idxByte]);&#xD;
							idxByte									:=idxByte + 2;&#xD;
						END_FOR;&#xD;
						&#xD;
						SendDat[5]:= 	UINT_TO_BYTE(Qty*2 + 3);&#xD;
						SendDat[8]:= 	UINT_TO_BYTE(Qty*2);&#xD;
						SktSend_Size[i] :=			Qty*2 + 9;&#xD;
					END_IF;&#xD;
				&#xD;
&#xD;
			4:  // Read Input Registers	Fn04&#xD;
					IF UseAccesslist THEN&#xD;
						AccessGranted := FALSE;&#xD;
						FOR j := LOWER_BOUND(AccessList, 1) TO UPPER_BOUND(AccessList, 1) DO&#xD;
							IF AccessList[j].RegisterType = eRegisterType#InputRegister THEN&#xD;
								IF AccessList[j].AccessType = eAccess#R OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(Address) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(Address) + Qty) &lt;= (AccessList[j].AddressArea.StartAddress +AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGranted := TRUE;&#xD;
										EXIT;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
					ELSE&#xD;
						AccessGranted := TRUE;&#xD;
					END_IF;&#xD;
				&#xD;
				&#xD;
					IF Qty = 0 or (Address &lt; LOWER_BOUND(InputRegisters, 1) OR (Address+ Qty) &gt; UPPER_BOUND(InputRegisters, 1)) OR NOT AccessGranted THEN 													// wrong quantity&#xD;
						SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
						SendDat[8]:=02;&#xD;
						SktSend_Size[i] :=	9;&#xD;
&#xD;
					ELSE	&#xD;
						idxByte	 :=9;											// initialize index&#xD;
						FOR j:= 1 TO Qty DO																	// add register in the send request&#xD;
							ToAryByte(InputRegisters[Address-1 + j],_HIGH_LOW,SendDat[idxByte]);&#xD;
							idxByte									:=idxByte + 2;&#xD;
						END_FOR;&#xD;
						&#xD;
						SendDat[5]:= 	UINT_TO_BYTE(Qty*2 + 3);&#xD;
						SendDat[8]:= 	UINT_TO_BYTE(Qty*2);&#xD;
						SktSend_Size[i] :=			Qty*2 + 9;&#xD;
					END_IF;&#xD;
&#xD;
&#xD;
			5:	// Write coil		Fn05&#xD;
			&#xD;
					IF UseAccesslist THEN&#xD;
						AccessGranted := FALSE;&#xD;
						FOR j := LOWER_BOUND(AccessList, 1) TO UPPER_BOUND(AccessList, 1) DO&#xD;
							IF AccessList[j].RegisterType = eRegisterType#Coil THEN&#xD;
								IF AccessList[j].AccessType = eAccess#W OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(Address) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(Address)) &lt;= (AccessList[j].AddressArea.StartAddress + AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGranted := TRUE;&#xD;
										EXIT;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
					ELSE&#xD;
						AccessGranted := TRUE;&#xD;
					END_IF;&#xD;
					&#xD;
					IF (Address &lt; LOWER_BOUND(Coils, 1) OR (Address &gt; UPPER_BOUND(Coils, 1))) OR NOT AccessGranted THEN&#xD;
						SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
						SendDat[8]:=02;&#xD;
						SktSend_Size[i] :=	9;&#xD;
					ELSE&#xD;
						IF RcvDat[10]=BYTE#16#FF THEN &#xD;
							Coils[Address]:=	TRUE;&#xD;
						ELSIF RcvDat[10]=BYTE#00 THEN&#xD;
							Coils[Address]:=	FALSE;&#xD;
						END_IF;&#xD;
						SendDat[5]:=	6;&#xD;
						SktSend_Size[i] :=			UINT#12;&#xD;
					END_IF;&#xD;
					&#xD;
					&#xD;
			6:  //  Write single register Fn06&#xD;
			&#xD;
					IF UseAccesslist THEN&#xD;
						AccessGranted := FALSE;&#xD;
						FOR j := LOWER_BOUND(AccessList, 1) TO UPPER_BOUND(AccessList, 1) DO&#xD;
							IF AccessList[j].RegisterType = eRegisterType#HoldingRegister THEN&#xD;
								IF AccessList[j].AccessType = eAccess#W OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(Address) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(Address)) &lt;= (AccessList[j].AddressArea.StartAddress + AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGranted := TRUE;&#xD;
										EXIT;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
					ELSE&#xD;
						AccessGranted := TRUE;&#xD;
					END_IF;&#xD;
						&#xD;
					IF (Address &lt; LOWER_BOUND(HoldingRegisters, 1) OR (Address) &gt; UPPER_BOUND(HoldingRegisters, 1)) OR NOT AccessGranted THEN&#xD;
						SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
						SendDat[8]:=02;&#xD;
						SktSend_Size[i] :=	9;&#xD;
					ELSE&#xD;
						AryByteTo(RcvDat[10],UINT#2,_HIGH_LOW,HoldingRegisters[Address]);&#xD;
						SendDat[5]:=	6;&#xD;
						SktSend_Size[i] :=			UINT#12;&#xD;
					END_IF;&#xD;
&#xD;
&#xD;
			15: // Write multiple coils Fn15&#xD;
			&#xD;
					IF UseAccesslist THEN&#xD;
						AccessGranted := FALSE;&#xD;
						FOR j := LOWER_BOUND(AccessList, 1) TO UPPER_BOUND(AccessList, 1) DO&#xD;
							IF AccessList[j].RegisterType = eRegisterType#Coil THEN&#xD;
								IF AccessList[j].AccessType = eAccess#W OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(Address) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(Address + Qty)) &lt;= (AccessList[j].AddressArea.StartAddress  + AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGranted := TRUE;&#xD;
										EXIT;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
					ELSE&#xD;
						AccessGranted := TRUE;&#xD;
					END_IF;&#xD;
			&#xD;
					IF Qty = 0 or (Address &lt; LOWER_BOUND(Coils, 1) OR (Address+ Qty) &gt; UPPER_BOUND(Coils, 1)) OR NOT AccessGranted THEN&#xD;
						SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
						SendDat[8]:=02;&#xD;
						SktSend_Size[i] :=	9;&#xD;
					ELSE&#xD;
						&#xD;
						QtyByte := BYTE_TO_UINT(RcvDat[12]);&#xD;
						idxByte := 13;&#xD;
						idxBit := 0;&#xD;
						&#xD;
						FOR j:= Address TO (Address + Qty -1) DO&#xD;
							Coils[j] := TestABit(In := RcvDat[idxByte], Pos := UINT_TO_USINT(idxBit));&#xD;
							Inc(idxBit);&#xD;
							IF idxBit &gt;= 8 THEN&#xD;
								Inc(idxByte);&#xD;
								idxBit := 0;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
						SendDat[5]:=	6;&#xD;
						SktSend_Size[i]	:=			UINT#12;&#xD;
					END_IF;&#xD;
&#xD;
			&#xD;
			16: // Write multiple registers Fn10&#xD;
			&#xD;
					IF UseAccesslist THEN&#xD;
						AccessGranted := FALSE;&#xD;
						FOR j := LOWER_BOUND(AccessList, 1) TO UPPER_BOUND(AccessList, 1) DO&#xD;
							IF AccessList[j].RegisterType = eRegisterType#HoldingRegister THEN&#xD;
								IF AccessList[j].AccessType = eAccess#W OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(Address) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(Address + Qty)) &lt;= (AccessList[j].AddressArea.StartAddress  + AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGranted := TRUE;&#xD;
										EXIT;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
					ELSE&#xD;
						AccessGranted := TRUE;&#xD;
					END_IF;&#xD;
			&#xD;
					IF Qty = 0 or (Address &lt; LOWER_BOUND(HoldingRegisters, 1) OR (Address+ Qty) &gt; UPPER_BOUND(HoldingRegisters, 1)) OR NOT AccessGranted THEN&#xD;
						SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
						SendDat[8]:=02;&#xD;
						SktSend_Size[i] :=	9;&#xD;
					ELSE&#xD;
						FOR j:= 1 TO (Qty) DO&#xD;
							AryByteTo(RcvDat[11 + j *2], UINT#2, _HIGH_LOW, HoldingRegisters[Address -1 + j]);&#xD;
						END_FOR;&#xD;
						SendDat[5]:=	6;&#xD;
						SktSend_Size[i]	:=			UINT#12;&#xD;
					END_IF;&#xD;
					&#xD;
			23: // Read Write registers Fn17&#xD;
			&#xD;
					AryByteTo(RcvDat[12],UINT#2,_HIGH_LOW,AddressWrite);					// Write address	&#xD;
					AryByteTo(RcvDat[14],UINT#2,_HIGH_LOW,QtyWrite);							// Write quantity&#xD;
					&#xD;
					IF UseAccesslist THEN&#xD;
						AccessGranted := FALSE;&#xD;
						AccessGrantedWrite := FALSE;&#xD;
						FOR j := LOWER_BOUND(AccessList, 1) TO UPPER_BOUND(AccessList, 1) DO&#xD;
							IF AccessList[j].RegisterType = eRegisterType#HoldingRegister THEN&#xD;
								IF AccessList[j].AccessType = eAccess#R OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(Address) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(Address + Qty)) &lt;= (AccessList[j].AddressArea.StartAddress  + AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGranted := TRUE;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
								IF AccessList[j].AccessType = eAccess#W OR AccessList[j].AccessType = eAccess#RW THEN&#xD;
									IF  DINT_TO_UDINT(AddressWrite) &gt;= AccessList[j].AddressArea.StartAddress AND (DINT_TO_UINT(AddressWrite + QtyWrite)) &lt;= (AccessList[j].AddressArea.StartAddress  + AccessList[j].AddressArea.Count) THEN&#xD;
										AccessGrantedWrite := TRUE;&#xD;
									END_IF;&#xD;
								END_IF;&#xD;
							END_IF;&#xD;
						END_FOR;&#xD;
					ELSE&#xD;
						AccessGranted := TRUE;&#xD;
						AccessGrantedWrite := TRUE;&#xD;
					END_IF;&#xD;
			&#xD;
					IF Qty = 0 or Qty &gt; 125 OR (Address &lt; LOWER_BOUND(HoldingRegisters, 1) OR (Address+ Qty) &gt; UPPER_BOUND(HoldingRegisters, 1)) OR NOT AccessGranted OR NOT AccessGrantedWrite THEN 													// wrong quantity&#xD;
						SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
						SendDat[8]:=02;&#xD;
						SktSend_Size[i] :=	9;&#xD;
					ELSE	&#xD;
						// Write data (Should be performed before read according to spec)&#xD;
						FOR j := 1 TO (QtyWrite) DO&#xD;
							AryByteTo(RcvDat[15 + j *2], UINT#2, _HIGH_LOW, HoldingRegisters[AddressWrite -1 + j]);&#xD;
						END_FOR;&#xD;
						&#xD;
						idxByte	 :=9;																				// initialize index&#xD;
						FOR j := 1 TO Qty DO																// add register in the send request&#xD;
							ToAryByte(HoldingRegisters[Address-1 + j], _HIGH_LOW, SendDat[idxByte]);&#xD;
							idxByte									:=idxByte + 2;&#xD;
						END_FOR;&#xD;
											&#xD;
						SendDat[5]:= 	UINT_TO_BYTE(Qty*2 + 3);&#xD;
						SendDat[8]:= 	UINT_TO_BYTE(Qty*2);&#xD;
						SktSend_Size[i] :=			Qty*2 + 9;&#xD;
					END_IF;&#xD;
		ELSE&#xD;
			SendDat[7]:=INT_TO_BYTE(INT#16#80 + Funct_Code);&#xD;
			SendDat[8]:=01;&#xD;
			SktSend_Size[i] :=	9;&#xD;
		END_CASE;&#xD;
		SktState[i] := 200;&#xD;
	END_IF;&#xD;
	&#xD;
	&#xD;
	IF SktState[i] = 200 THEN		(* Send Data *)&#xD;
		iSktTCPSend[i](Execute :=FALSE, Socket :=Socket[i], SendDat := SendDat[0]);&#xD;
		SktState[i] := 210;&#xD;
	END_IF;&#xD;
&#xD;
	IF SktState[i] = 210 THEN		(* Send Data *)&#xD;
		iSktTCPSend[i](Execute :=TRUE, Socket :=Socket[i],SendDat := SendDat[0], Size := SktSend_Size[i]);&#xD;
		&#xD;
		IF iSktTCPSend[i].Done THEN&#xD;
			SktState[i] := 220;&#xD;
		END_IF;&#xD;
		IF iSktTCPSend[i].Error THEN&#xD;
			SktState[i] := 230; (* Send Error *)&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
&#xD;
	IF SktState[i] = 220 THEN&#xD;
		IF SendDat_Done[i] THEN&#xD;
			(* OneShot SendDat_Done *)&#xD;
			SendDat_Done[i] :=FALSE;&#xD;
			SktState[i] := 100;&#xD;
		ELSE&#xD;
			SendDat_Ex[i] := FALSE;&#xD;
			SendDat_Done[i] :=TRUE;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
&#xD;
	IF SktState[i] = 230 THEN&#xD;
		IF SendDat_Error[i] THEN&#xD;
			SktConnected[i] := FALSE;&#xD;
			SktDoClose[i] := TRUE;&#xD;
			SktState[i] := 0;&#xD;
		ELSE&#xD;
			SendDat_Ex[i] := FALSE;&#xD;
			SendDat_Error[i] := TRUE;&#xD;
		END_IF;	&#xD;
	END_IF;&#xD;
	&#xD;
END_FOR;&#xD;
&#xD;
NoOfClientsConnected := 0;&#xD;
FOR i := LOWER_BOUND(SktConnected, 1) TO UPPER_BOUND(SktConnected, 1) DO&#xD;
	IF SktConnected[i] THEN&#xD;
		Inc(NoOfClientsConnected);&#xD;
	END_IF;&#xD;
END_FOR;&#xD;
&#xD;
Connected := NoOfClientsConnected &gt; 0;</Text></StructuredTextModel>