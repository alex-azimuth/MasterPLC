<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>IF Execute AND State = 0 THEN&#xD;
	SendCfg.EndTrig := _eSERIAL_END#_SERIAL_END_NONE;&#xD;
	SendCfg.StartTrig := _eSERIAL_START#_SERIAL_START_NONE;&#xD;
	ClearBufKind := _eSERIAL_BUF_KIND#_BUF_SENDRCV;&#xD;
	TimeOut_UINT := LINT_TO_UINT(TimeToNanoSec(TimeOut)/100000000); //Time to 0.1s&#xD;
	State := 10;&#xD;
END_IF;&#xD;
&#xD;
IF State = 10 THEN&#xD;
	iClear(Execute := FALSE, DevicePort := DevicePort, BufKind := ClearBufKind);&#xD;
	State := 20;&#xD;
END_IF;&#xD;
&#xD;
IF State = 20 THEN&#xD;
	iClear(Execute := TRUE, DevicePort := DevicePort, BufKind := ClearBufKind);&#xD;
	IF NOT iClear.Busy THEN&#xD;
		State := 30;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 30 THEN&#xD;
	SendStr := 'ATE0$0D'; // Turn off Echo in modem&#xD;
&#xD;
	Clear(SendDat);&#xD;
	ToAryByte(In := SendStr, AryOut := SendDat[0]);&#xD;
	SendSize := LEN(SendStr);&#xD;
	iSend(Execute := FALSE, DevicePort := DevicePort, SendDat := SendDat[0], SendSize := SendSize, SendCfg := SendCfg);&#xD;
	State := 40;&#xD;
END_IF;&#xD;
&#xD;
IF State = 40 THEN&#xD;
	iSend(Execute := TRUE, DevicePort := DevicePort, SendDat := SendDat[0], SendSize := SendSize, SendCfg := SendCfg);&#xD;
	IF NOT iSend.Busy THEN&#xD;
		IF iSend.Done THEN&#xD;
			State := 50;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iSend.Error THEN&#xD;
			State := 300;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 50 THEN&#xD;
		Clear(RcvDat);&#xD;
		Clear(RcvStr);&#xD;
		RcvCfg.StartTrig := _eSERIAL_START#_SERIAL_START_NONE;&#xD;
		RcvCfg.EndTrig := _eSERIAL_END#_SERIAL_END_RCV_SIZE;&#xD;
		RcvCfg.RcvSizeCfg := 1;&#xD;
		RcvOption.TimeOut := TimeOut_UINT;&#xD;
		RcvBytePnt := 0;&#xD;
		State := 60;&#xD;
END_IF;&#xD;
&#xD;
IF State = 60 THEN&#xD;
	iRcv(Execute := FALSE, DevicePort := DevicePort, RcvDat := RcvDat[RcvBytePnt], Size := UINT#1, RcvCfg := RcvCfg, Option := RcvOption);&#xD;
	State := 70;&#xD;
END_IF;&#xD;
&#xD;
IF State = 70 THEN&#xD;
	iRcv(Execute := TRUE, DevicePort := DevicePort, RcvDat := RcvDat[RcvBytePnt], Size := UINT#1, RcvCfg := RcvCfg, Option := RcvOption);&#xD;
	IF NOT iRcv.Busy THEN&#xD;
		IF iRcv.Done THEN&#xD;
			RcvBytePnt := RcvBytePnt + iRcv.RcvSize;&#xD;
			//Receive completed&#xD;
			AryByteTo(In := RcvDat[0], Size := RcvBytePnt, OutVal := RcvStr);&#xD;
			IF FIND(RcvStr, '$0D$0AOK$0D$0A') &gt; 0 THEN&#xD;
				State := 80;&#xD;
			ELSE&#xD;
				State := 60; //Not completed the read yet&#xD;
			END_IF;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iRcv.Error THEN&#xD;
			State := 300;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
IF State = 80 THEN&#xD;
	SendStr := 'AT+CMGD=1,4$0D$0A'; // To delete the buffer in the modem&#xD;
&#xD;
	Clear(SendDat);&#xD;
	ToAryByte(In := SendStr, AryOut := SendDat[0]);&#xD;
	SendSize := LEN(SendStr);&#xD;
	iSend(Execute := FALSE, DevicePort := DevicePort, SendDat := SendDat[0], SendSize := SendSize, SendCfg := SendCfg);&#xD;
	State := 90;&#xD;
END_IF;&#xD;
&#xD;
IF State = 90 THEN&#xD;
	iSend(Execute := TRUE, DevicePort := DevicePort, SendDat := SendDat[0], SendSize := SendSize, SendCfg := SendCfg);&#xD;
	IF NOT iSend.Busy THEN&#xD;
		IF iSend.Done THEN&#xD;
			State := 100;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iSend.Error THEN&#xD;
			State := 300;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
IF State = 100 THEN&#xD;
		Clear(RcvDat);&#xD;
		Clear(RcvStr);&#xD;
		RcvCfg.StartCode[0] := 16#0D;&#xD;
		RcvCfg.StartCode[1] := 16#0A;&#xD;
		RcvCfg.StartTrig := _eSERIAL_START#_SERIAL_START_STARTCODE2;&#xD;
		RcvCfg.EndCode[0] := 16#0D;&#xD;
		RcvCfg.EndCode[1] := 16#0A;&#xD;
		RcvCfg.EndTrig := _eSERIAL_END#_SERIAL_END_ENDCODE2;&#xD;
		RcvOption.TimeOut := TimeOut_UINT;&#xD;
		iRcv(Execute := FALSE, DevicePort := DevicePort, RcvDat := RcvDat[0], Size := UINT#256, RcvCfg := RcvCfg, Option := RcvOption);&#xD;
		State := 110;&#xD;
END_IF;&#xD;
&#xD;
IF State = 110 THEN&#xD;
	iRcv(Execute := TRUE, DevicePort := DevicePort, RcvDat := RcvDat[0], Size := UINT#256, RcvCfg := RcvCfg, Option := RcvOption);&#xD;
	IF NOT iRcv.Busy THEN&#xD;
		IF iRcv.Done THEN&#xD;
			AryByteTo(In := RcvDat[0], Size := iRcv.RcvSize, OutVal := RcvStr);&#xD;
			IF RcvStr = 'OK' THEN&#xD;
				State := 290;&#xD;
			ELSE&#xD;
				State := 290;&#xD;
			END_IF;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iRcv.Error THEN&#xD;
			State := 290;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
IF State = 290 THEN&#xD;
	IF Done THEN&#xD;
		State := 400;&#xD;
	ELSE&#xD;
		Done := TRUE;&#xD;
		Error := FALSE;&#xD;
		Busy := FALSE;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 300 THEN&#xD;
	IF Error THEN&#xD;
		State := 400;&#xD;
	ELSE&#xD;
		Done := FALSE;&#xD;
		Error := TRUE;&#xD;
		Busy := FALSE;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 400 THEN&#xD;
	IF NOT Execute THEN&#xD;
		Done := FALSE;&#xD;
		Error := FALSE;&#xD;
		State := 0;&#xD;
	END_IF;&#xD;
END_IF;</Text></StructuredTextModel>