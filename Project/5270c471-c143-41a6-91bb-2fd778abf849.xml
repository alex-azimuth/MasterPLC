<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>// Cycle counter triggers&#xD;
Enable_RT(Clk:=Enable);&#xD;
New_Cycle_RT(Clk:=New_Cycle_Trigger);&#xD;
&#xD;
// Clutch triggers&#xD;
Clutch_RT(Clk:=Clutch_Active);&#xD;
Clutch_FT(Clk:=Clutch_Active);&#xD;
&#xD;
// Press triggers&#xD;
Press_RT(Clk:=Press_Motor_On);&#xD;
Press_FT(Clk:=Press_Motor_On);&#xD;
&#xD;
// Adj triggers&#xD;
Adj_RT(Clk:=Adj_Motor_On);&#xD;
Adj_FT(Clk:=Adj_Motor_On);&#xD;
&#xD;
// Aux triggers&#xD;
Grease_Success_RT(Clk:=Grease_Success);&#xD;
Grease_Failure_RT(Clk:=Grease_Failure);&#xD;
Hyd_Overload_RT(Clk:=Overload_Trip);&#xD;
&#xD;
//////////// Cycle Counter&#xD;
// Trigger a signal every time we go through a range of positions.&#xD;
IF (Pos &gt; 175 AND Pos &lt; 185) THEN&#xD;
	New_Cycle_Trigger := TRUE;&#xD;
ELSE&#xD;
	New_Cycle_Trigger := FALSE;&#xD;
END_IF;&#xD;
&#xD;
// Increment the cycle counter every time the press makes a complete cycle&#xD;
IF (New_Cycle_RT.Q) THEN&#xD;
	Analytics.Cycle_Counter := Analytics.Cycle_Counter+1;&#xD;
	// Add to the warranty count and determine if it is void&#xD;
	Analytics.Warranty_Count := Analytics.Warranty_Count+1;&#xD;
	IF (Analytics.Warranty_Count&gt;5000000) THEN&#xD;
		Analytics.Warranty_Void := TRUE;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
//////////// Clutch&#xD;
// Add a new count each time the clutch is activated. Set the variable that measures the time the clutch is active.&#xD;
IF (Clutch_RT.Q) THEN&#xD;
	Analytics.Clutch_Counter := Analytics.Clutch_Counter+1;&#xD;
	Clutch_T_Start := TRUE;&#xD;
END_IF;&#xD;
&#xD;
// Start timer when clutch is engaged&#xD;
Clutch_Timer(In:=Clutch_T_Start, PT:=T#999999s, ET=&gt;Clutch_ET);&#xD;
&#xD;
// Clutch engage time for this cycle gets added to the total time&#xD;
IF (Clutch_FT.Q) THEN&#xD;
	Analytics.Clutch_Time_TIME := Add_Time(Analytics.Clutch_Time_TIME, Clutch_Timer.ET);&#xD;
	Clutch_T_Start := FALSE;&#xD;
END_IF;&#xD;
&#xD;
//////////// Press Motor&#xD;
// Set the variable that monitors the time the motor of the press is started.&#xD;
IF (Press_RT.Q) THEN&#xD;
	Press_T_Start := TRUE;&#xD;
END_IF;&#xD;
&#xD;
// Start the timer when the motor is started&#xD;
Press_Timer(In:=Press_T_Start, PT:=T#999999s, ET=&gt;Press_ET);&#xD;
&#xD;
// Add the time the motor was running to the current time&#xD;
IF (Press_FT.Q) THEN&#xD;
	Analytics.Press_Time_TIME := Add_Time(Analytics.Press_Time_TIME, Press_ET);&#xD;
	Press_T_Start := FALSE;&#xD;
END_IF;&#xD;
&#xD;
//////////// Adjustment Motor&#xD;
// Set the variable that monitors the time the adjustment motor is started.&#xD;
IF (Adj_RT.Q) THEN&#xD;
	Adj_T_Start := TRUE;&#xD;
END_IF;&#xD;
&#xD;
// Start the timer when the motor is started&#xD;
Adj_Timer(In:=Adj_T_Start, PT:=T#999999s, ET=&gt;Adj_ET);&#xD;
&#xD;
// Add the time the motor was running to the current time&#xD;
IF (Adj_FT.Q) THEN&#xD;
	Analytics.Adj_Time_TIME := Add_Time(Analytics.Adj_Time_TIME, Adj_ET);&#xD;
	Adj_T_Start := FALSE;&#xD;
END_IF;&#xD;
&#xD;
//////////// Grease&#xD;
// Increment grease success counter&#xD;
IF (Grease_Success_RT.Q) THEN&#xD;
	Analytics.Grease_Success_Counter := Analytics.Grease_Success_Counter+1;&#xD;
END_IF;&#xD;
&#xD;
// Increase grease failure counter&#xD;
IF (Grease_Failure_RT.Q) THEN&#xD;
	Analytics.Grease_Fail_Counter := Analytics.Grease_Fail_Counter+1;&#xD;
END_IF;&#xD;
&#xD;
//////////// Hydraulic overload&#xD;
// Increase hydraulic overload counter&#xD;
IF (Hyd_Overload_RT.Q) THEN&#xD;
	Analytics.Hyd_Overload_Counter := Analytics.Hyd_Overload_Counter+1;&#xD;
END_IF;&#xD;
&#xD;
&#xD;
//////////// Reset&#xD;
IF (Analytics.Reset_Cycle_Counter) THEN&#xD;
	Analytics.Cycle_Counter := 0;&#xD;
END_IF;&#xD;
IF (Analytics.Reset_Clutch_Time) THEN&#xD;
	Analytics.Clutch_Time_TIME := T#0s;&#xD;
END_IF;&#xD;
&#xD;
//////////// Power on Timer&#xD;
// Start the timer upon power up&#xD;
IF (Enable) THEN&#xD;
	Machine_ON_TON(IN:=Enable, PT:=T#99999D, ET=&gt;Analytics.Total_Time_ON_TIME);&#xD;
END_IF;&#xD;
&#xD;
////////////Determine total time by adding current time&#xD;
Clutch_Time_Total := ADD_TIME(Analytics.Clutch_Time_TIME, Clutch_ET);&#xD;
Motor_Time_Total := ADD_TIME(Analytics.Press_Time_TIME, Press_ET);&#xD;
Adj_Total_Time := ADD_TIME(Analytics.Adj_Time_TIME, Adj_ET);&#xD;
&#xD;
Pack_ON_Time(Enable:=TRUE, A_Time:=Analytics.Total_Time_ON_TIME, Packed_Time=&gt;Analytics.Total_Time_ON);&#xD;
Pack_Clutch_Time(Enable:=TRUE, A_Time:=Clutch_Time_Total, Packed_Time=&gt;Analytics.Clutch_Time);&#xD;
Pack_Press_Mtr_Time(Enable:=TRUE, A_Time:=Motor_Time_Total, Packed_Time=&gt;Analytics.Press_Time);&#xD;
Pack_Adj_Time(Enable:=TRUE, A_Time:=Adj_Total_Time, Packed_Time=&gt;Analytics.Adj_Time);</Text></StructuredTextModel>