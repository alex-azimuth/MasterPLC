<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>IF State = 0 AND Enable THEN&#xD;
	State := 10;&#xD;
END_IF;&#xD;
&#xD;
IF State = 10 THEN&#xD;
	iSktTCPAccept(Execute := FALSE);&#xD;
	State := 20;&#xD;
END_IF;&#xD;
&#xD;
IF State = 20 THEN&#xD;
	iSktTCPAccept(Execute := TRUE, SrcTcpPort := Port_No, Socket =&gt; Socket, TimeOut := 20);&#xD;
	IF NOT iSktTCPAccept.Busy THEN&#xD;
		IF iSktTCPAccept.Done THEN&#xD;
			State := 100; //Socket open&#xD;
			Connected := TRUE;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iSktTCPAccept.Error THEN&#xD;
			State := 400; // Close&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 100 THEN&#xD;
	iSktGetTCPStatus(Execute := FALSE, Socket := Socket);&#xD;
	IF SktReconnect THEN&#xD;
		SktReconnect := FALSE;&#xD;
		State := 400;&#xD;
	ELSE&#xD;
		State := 110;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 110 THEN&#xD;
	iSktGetTCPStatus(Execute := TRUE, Socket := Socket);&#xD;
	IF NOT iSktGetTCPStatus.Busy THEN&#xD;
		IF iSktGetTCPStatus.Done THEN&#xD;
			IF iSktGetTCPStatus.DatRcvFlag THEN&#xD;
				State :=150;&#xD;
			ELSE&#xD;
				State := 100;&#xD;
				IF SendDat_Ex THEN&#xD;
					State := 200;&#xD;
				END_IF;&#xD;
				&#xD;
				IF iSktGetTCPStatus.TcpStatus &lt;&gt;_eCONNECTION_STATE#_ESTABLISHED THEN&#xD;
					State := 400; // Close&#xD;
				END_IF;&#xD;
			END_IF;&#xD;
		END_IF;&#xD;
		&#xD;
		IF iSktGetTCPStatus.Error THEN&#xD;
			State := 400; // Close&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 120 THEN&#xD;
	State := 100;&#xD;
END_IF;&#xD;
&#xD;
IF State = 150 THEN		(* Data received *)&#xD;
	iSktTCPRcv(Execute :=FALSE, RcvDat :=RcvDat[0]);&#xD;
	State :=160;&#xD;
END_IF;&#xD;
&#xD;
IF State =160 THEN		(* Data received *)&#xD;
	iSktTCPRcv(Execute :=TRUE, Socket := Socket, TimeOut := UINT#20, Size := UINT#2000, RcvDat := RcvDat[0], Done =&gt; SktRcv_Done, Busy =&gt; SktRcv_Busy, Error =&gt; SktRcv_Error, ErrorID =&gt; SktRcv_Error_ID, RcvSize =&gt; SktRcv_Size);&#xD;
	&#xD;
	IF SktRcv_Done THEN&#xD;
		IF RcvDat_Done THEN&#xD;
			(* OneShot RcvDat_Done *)&#xD;
			RcvDat_Done :=FALSE;&#xD;
			State := 100;&#xD;
		ELSE&#xD;
			RcvDat_Done :=TRUE;&#xD;
			RcvSize := SktRcv_Size;&#xD;
		END_IF;&#xD;
	END_IF;&#xD;
	&#xD;
	IF SktRcv_Error THEN&#xD;
		State := 400; // Close&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 200 THEN		(* Send Data *)&#xD;
	iSktTCPSend(Execute :=FALSE, Socket :=Socket, SendDat := SendDat[0]);&#xD;
	State := 210;&#xD;
END_IF;&#xD;
&#xD;
IF State = 210 THEN		(* Send Data *)&#xD;
	SktSend_Size := SendDat_Size;&#xD;
	iSktTCPSend(Execute :=TRUE, Socket :=Socket,SendDat := SendDat[0], Size := SktSend_Size, Done =&gt; SktSend_Done, Busy =&gt; SktSend_Busy, Error =&gt; SktSend_Error, ErrorID =&gt; SktSend_Error_ID);&#xD;
	&#xD;
	IF SktSend_Done THEN&#xD;
		State := 220;&#xD;
	END_IF;&#xD;
	IF SktSend_Error THEN&#xD;
		State := 230; (* Send Error *)&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 220 THEN&#xD;
	IF SendDat_Done THEN&#xD;
		(* OneShot SendDat_Done *)&#xD;
		SendDat_Done :=FALSE;&#xD;
		State := 100;&#xD;
	ELSE&#xD;
		SendDat_Ex := FALSE;&#xD;
		SendDat_Done :=TRUE;&#xD;
	END_IF;&#xD;
END_IF;&#xD;
&#xD;
IF State = 230 THEN&#xD;
	IF SendDat_Error THEN&#xD;
		SendDat_Error := FALSE;&#xD;
		State := 400;&#xD;
	ELSE&#xD;
		SendDat_Ex := FALSE;&#xD;
		SendDat_Error := TRUE;&#xD;
	END_IF;	&#xD;
END_IF;&#xD;
&#xD;
IF State = 400 THEN&#xD;
	iSktClose(Execute := FALSE, Socket := Socket);&#xD;
	Connected := FALSE;&#xD;
	State := 410;&#xD;
END_IF;&#xD;
	&#xD;
IF State = 410 THEN&#xD;
	iSktClose(Execute := TRUE, Socket := Socket);&#xD;
	IF NOT iSktClose.Busy THEN&#xD;
		State := 0;&#xD;
	END_IF;&#xD;
END_IF;</Text></StructuredTextModel>